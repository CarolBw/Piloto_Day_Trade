
# Tentativa inicial - Modelo base LSTM para previsÃ£o intradiÃ¡ria de preÃ§os

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# ğŸ”§ ConstruÃ§Ã£o do modelo
LSTM_model = Sequential([
    
    # Camada LSTM 1:
    # - 100 unidades (aumentado para maior capacidade de captura de padrÃµes temporais)
    # - return_sequences=True para passar a sequÃªncia completa para a prÃ³xima camada
    # - input_shape: (32, nÃºmero de features) - sequÃªncia de 32 timesteps com n features
    LSTM(100, return_sequences=True, input_shape=(X_treino.shape[1], X_treino.shape[2])),
    
    # Dropout leve para reduzir overfitting sem perder muito sinal
    Dropout(0.1),

    # Camada LSTM 2:
    # - Outra LSTM com 100 unidades
    # - TambÃ©m retorna sequÃªncia, pois a saÃ­da Ã© uma sequÃªncia (32 timestamps com 4 preÃ§os)
    LSTM(100, return_sequences=True),
    
    # Outro Dropout leve
    Dropout(0.1),

    # Camada densa intermediÃ¡ria:
    # - 64 neurÃ´nios com ativaÃ§Ã£o ReLU
    # - Introduz nÃ£o-linearidade e ajuda a refinar a saÃ­da da LSTM antes da previsÃ£o final
    Dense(64, activation='relu'),

    # Camada de saÃ­da:
    # - 4 unidades: prevendo abertura, mÃ¡xima, mÃ­nima e fechamento por timestamp
    # - Sem ativaÃ§Ã£o, saÃ­da contÃ­nua (valores de preÃ§os normalizados)
    Dense(4)
])

# ğŸ§  CompilaÃ§Ã£o do modelo
# - Otimizador Adam, bom para problemas nÃ£o estacionÃ¡rios como sÃ©ries temporais
# - FunÃ§Ã£o de perda MSE (erro quadrÃ¡tico mÃ©dio), apropriado para regressÃ£o
LSTM_model.compile(optimizer='adam', loss='mse')

# ğŸš‚ Treinamento do modelo
# - 20 Ã©pocas: nÃºmero inicial para observar o desempenho
# - batch_size=16: menor para atualizar pesos com frequÃªncia e lidar com variaÃ§Ã£o dos dados
historico = LSTM_model.fit(
    X_treino, y_treino,
    validation_data=(X_teste, y_teste),
    epochs=20,
    batch_size=16
)


