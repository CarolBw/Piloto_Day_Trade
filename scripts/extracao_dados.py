
# Importa√ß√£o das bibliotecas necess√°rias
import yfinance as yf  # Biblioteca para baixar dados financeiros do Yahoo Finance
import pandas as pd  # Biblioteca para manipula√ß√£o de dados em tabelas (DataFrame)
from datetime import datetime, timedelta  # Para manipular datas e intervalos de tempo
import os  # Biblioteca para intera√ß√£o com o sistema operacional (como verificar a exist√™ncia de arquivos)
import dotenv  # Biblioteca para carregar vari√°veis de ambiente de um arquivo .env

# Carregar vari√°veis de ambiente do arquivo .env
dotenv.load_dotenv()

def extrair_dados(ticker, intervalo, dias, dados_brutos):
    """Extrai dados hist√≥ricos do Yahoo Finance e complementa com dados novos at√© ontem."""
    
    extracao_inicial = False  # Flag para indicar se estamos realizando a primeira extra√ß√£o de dados
    
    # Verifica se o arquivo de dados existe
    if os.path.exists(dados_brutos):
        try:
            # Tenta carregar os dados j√° existentes no arquivo CSV
            df_total = pd.read_csv(dados_brutos, index_col=0)

            # Converte o √≠ndice para datetime, for√ßando coer√ß√£o de erros
            df_total.index = pd.to_datetime(df_total.index, errors="coerce", utc=True)

            # Remove linhas com √≠ndice inv√°lido (NaT)
            df_total = df_total[df_total.index.notna()]

            # Obt√©m a √∫ltima data registrada nos dados
            if df_total.empty:
                raise ValueError("Arquivo CSV est√° vazio ap√≥s limpeza.")

            ultima_data = df_total.index.max()
            print(f"üìÖ √öltima data registrada no arquivo: {ultima_data}")

            if pd.isna(ultima_data):  # Se a √∫ltima data for inv√°lida
                raise ValueError("Nenhuma data v√°lida encontrada no arquivo existente.")

            # Remove o fuso hor√°rio se houver
            if ultima_data.tzinfo is not None:
                ultima_data = ultima_data.tz_convert(None)

            # Define o in√≠cio da extra√ß√£o (5 minutos ap√≥s o √∫ltimo dado)
            data_inicio = ultima_data + timedelta(minutes=5)
            extracao_inicial = False  # Indica que n√£o √© a primeira extra√ß√£o

        except Exception as e:
            # Caso haja erro ao carregar ou processar o arquivo, inicia uma nova extra√ß√£o
            print(f"‚ö†Ô∏è Erro ao carregar o arquivo CSV: {e}. Iniciando extra√ß√£o do zero.")
            df_total = pd.DataFrame()  # Cria um DataFrame vazio
            data_inicio = datetime.today() - timedelta(days=dias)  # Define a data de in√≠cio como "dias" atr√°s
            extracao_inicial = True  # Marca que √© a primeira extra√ß√£o

    else:
        # Se o arquivo n√£o existe, inicia a extra√ß√£o do zero
        df_total = pd.DataFrame()  # Cria um DataFrame vazio
        data_inicio = datetime.today() - timedelta(days=dias)  # Define a data de in√≠cio como "dias" atr√°s
        extracao_inicial = True  # Marca que √© a primeira extra√ß√£o

    data_fim = datetime.today()  # Define o fim da extra√ß√£o como a data e hora atuais
    extracao_realizada = False  # Flag para verificar se houve extra√ß√£o de dados

    print("üîÑ Iniciando extra√ß√£o de dados...")  # Mensagem indicando o in√≠cio da extra√ß√£o
    
    # La√ßo que realiza a extra√ß√£o dos dados enquanto data_inicio for menor que data_fim
    while data_inicio < data_fim:
        data_fim_bloco = min(data_inicio + timedelta(days=7), data_fim)  # Define o bloco de dados a ser extra√≠do (7 dias)
        print(f"üìä Extraindo de {data_inicio.strftime('%Y-%m-%d %H:%M')} at√© {data_fim_bloco.strftime('%Y-%m-%d %H:%M')}")

        # Baixa os dados do Yahoo Finance para o intervalo de tempo definido
        df_novo = yf.download(ticker, start=data_inicio.strftime("%Y-%m-%d"),
                              end=data_fim_bloco.strftime("%Y-%m-%d"), interval=intervalo, progress=True)

        if df_novo.empty:
            print("‚ö†Ô∏è Nenhum dado novo encontrado para este per√≠odo.")  # Caso n√£o haja dados, interrompe o processo
            break

        # Concatena os dados novos com os existentes
        df_total = pd.concat([df_total, df_novo])
        data_inicio = data_fim_bloco  # Atualiza a data de in√≠cio para o pr√≥ximo bloco de dados
        extracao_realizada = True  # Marca que a extra√ß√£o foi realizada

    # Ap√≥s a extra√ß√£o, se os dados foram obtidos com sucesso
    if extracao_realizada:
        df_total.to_csv(dados_brutos)  # Salva os dados extra√≠dos no arquivo CSV
        print("‚úÖ Extra√ß√£o conclu√≠da e dados salvos no arquivo.")

        # Exibe informa√ß√µes sobre a extra√ß√£o realizada
        if extracao_inicial:
            print(f"üÜï Extra√ß√£o inicial realizada com {dias} dias de dados.")  # Se for a primeira extra√ß√£o
        else:
            # Caso contr√°rio, exibe o per√≠odo dos dados extra√≠dos
            primeira_data_extraida = df_total.index.min()  # Primeira data extra√≠da
            ultima_data_extraida = df_total.index.max()  # √öltima data extra√≠da
            print(f"‚ûï Complemento realizado: {primeira_data_extraida} at√© {ultima_data_extraida}.")
    else:
        print("‚è≠Ô∏è Nenhum dado novo para extrair. Nenhuma atualiza√ß√£o realizada.")  # Caso n√£o haja dados novos

    print("üìä √öltimos dados extra√≠dos:")  # Exibe os √∫ltimos dados extra√≠dos
    print(df_total.tail())  # Mostra as √∫ltimas 5 linhas dos dados extra√≠dos

    # Filtra os dados √∫teis, removendo finais de semana e hor√°rios fora do hor√°rio de negocia√ß√£o (10h-17:10h)
    df_total.index = pd.to_datetime(df_total.index, errors="coerce", utc=True)  # Converte novamente as datas
    df_uteis = df_total[(df_total.index.weekday < 5) & (df_total.index.hour >= 10) & 
                         (df_total.index.hour < 18) & ((df_total.index.hour != 17) | (df_total.index.minute <= 10))]

    dias_uteis = df_uteis.index.normalize().nunique()  # Conta os dias √∫teis no per√≠odo
    print(f"üìà Captamos {dias_uteis} dias √∫teis no per√≠odo das 10h √†s 17:10h.")  # Exibe a quantidade de dias √∫teis

    return df_uteis  # Retorna os dados √∫teis filtrados

# Se este script for executado diretamente
if __name__ == "__main__":
    ticker = "BBDC4.SA"  # Define o ticker da a√ß√£o a ser consultada
    intervalo = "5m"  # Define o intervalo dos dados (5 minutos)
    dias = 45  # Define o n√∫mero de dias de dados a ser extra√≠do inicialmente
    dados_brutos= "/content/Piloto_Day_Trade/data/dados_brutosv2.csv"  # Caminho do arquivo para salvar os dados
    df = extrair_dados(ticker, intervalo, dias, dados_brutos)  # Chama a fun√ß√£o para extrair os dados
